import axios from "axios";
import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom"; // Import useNavigate
import "./Overview.css";

const SeverityLabel = ({ severity, count }) => (
  <span className={`severity-badge ${severity.toLowerCase()}`}>
    {severity} ({count})
  </span>
);

export default function TopVulnerabilitiesList() {
  const [vulnerabilitiesData, setVulnerabilitiesData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const userId = localStorage.getItem("userId");
  const token = localStorage.getItem("token");
  const navigate = useNavigate(); // Hook for navigation

  const severityLevels = ["Critical", "High", "Medium", "Low"];

  useEffect(() => {
    const fetchVulnerabilities = async () => {
      try {
        if (!userId || !token) {
          throw new Error("User ID or token is missing. Please log in.");
        }

        setLoading(true);
        const response = await axios.get("http://localhost:5000/api/topvul", {
          headers: {
            Authorization: `Bearer ${token}`,
            "X-User-Id": userId,
          },
        });

        if (!response.data.success) {
          throw new Error(response.data.message || "API returned an error");
        }

        const groupedData = response.data.data.reduce((acc, vuln) => {
          const bugName = vuln.bug_name || "Unknown Vulnerability";
          if (!acc[bugName]) {
            acc[bugName] = {
              bug_name: bugName,
              severities: severityLevels.reduce((sevAcc, sev) => {
                sevAcc[sev] = { severity: sev, count: 0 };
                return sevAcc;
              }, {}),
            };
          }
          if (severityLevels.includes(vuln.severity)) {
            acc[bugName].severities[vuln.severity].count++;
          }
          return acc;
        }, {});

        const transformedData = Object.values(groupedData).map((vuln) => ({
          bug_name: vuln.bug_name,
          severities: Object.values(vuln.severities),
        }));

        setVulnerabilitiesData(transformedData);
        setError(null);
      } catch (error) {
        console.error("Error fetching vulnerabilities:", error);
        setError(error.message);
      } finally {
        setLoading(false);
      }
    };

    fetchVulnerabilities();
  }, [userId, token]);

  // Handle click on vulnerability to redirect
  // const handleVulnerabilityClick = (bugName) => {
  //   navigate(`/vulnerabilities/${encodeURIComponent(bugName)}`);
  // };
  const handleVulnerabilityClick = (bugName) => {
    navigate(`/vulnerabilities`);
  };

  return (
    <div className="data-card">
      <h2>Top Vulnerabilities</h2>
      {loading ? (
        <p>Loading vulnerabilities...</p>
      ) : error ? (
        <p style={{ color: "#dc2626" }}>{error}</p>
      ) : vulnerabilitiesData.length > 0 ? (
        <ul className="list">
          {vulnerabilitiesData.map((vulnerability, index) => (
            <li key={index} className="list-item">
              <span
                onClick={() => handleVulnerabilityClick(vulnerability.bug_name)}
              >
                {vulnerability.bug_name}
              </span>
              <div style={{ display: "flex", gap: "0.5rem" }}>
                {vulnerability.severities.map(
                  (sev, sevIndex) =>
                    sev.count > 0 && (
                      <SeverityLabel
                        key={sevIndex}
                        severity={sev.severity}
                        count={sev.count}
                      />
                    )
                )}
              </div>
            </li>
          ))}
        </ul>
      ) : (
        <p>No vulnerabilities to display.</p>
      )}
    </div>
  );
}